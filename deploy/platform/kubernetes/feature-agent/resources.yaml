# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

---
apiVersion: v1
kind: Service
metadata:
  name: gateway
spec:
  selector:
    app: gateway
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway-deployment
  labels:
    app: gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gateway
  template:
    metadata:
      labels:
        # @feature: java-agent-injector; enable the java agent injector
        swck-java-agent-injected: "true"
        app: gateway
      annotations:
        sidecar.istio.io/inject: "${AGENTLESS}"
        # @feature: java-agent-injector; set the java agent configuration
        strategy.skywalking.apache.org/inject.Container: "gateway"
        strategy.skywalking.apache.org/agent.Overlay: "true"
        agent.skywalking.apache.org/agent.service_name: "agent::gateway"
        optional.skywalking.apache.org: "spring-cloud-gateway-3.x"
        sidecar.skywalking.apache.org/initcontainer.Image: "${SW_AGENT_JAVA_IMAGE}"
    spec:
      containers:
        - name: gateway
          image: ${HUB}/gateway-service:${TAG}
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 80
          # @feature: agent; set env to configure java agent, If we use injector, we don't need to set env, only to configure java gent through annotation
          env:
            - name: SW_AGENT_NAME
              value: agent::gateway
            - name: SW_AGENT_COLLECTOR_BACKEND_SERVICES
              value: ${BACKEND_SERVICE}:11800

---
apiVersion: v1
kind: Service
metadata:
  name: songs
spec:
  selector:
    app: songs
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: songs-deployment
  labels:
    app: songs
spec:
  replicas: 1
  selector:
    matchLabels:
      app: songs
  template:
    metadata:
      labels:
        # @feature: java-agent-injector; enable the java agent injector
        swck-java-agent-injected: "true"
        app: songs
      annotations:
        sidecar.istio.io/inject: "${AGENTLESS}"
        # @feature: java-agent-injector; set the java agent configuration
        strategy.skywalking.apache.org/inject.Container: "songs"
        strategy.skywalking.apache.org/agent.Overlay: "true"
        agent.skywalking.apache.org/agent.service_name: "agent::songs"
        sidecar.skywalking.apache.org/initcontainer.Image: "${SW_AGENT_JAVA_IMAGE}"
    spec:
      containers:
        - name: songs
          image: ${HUB}/songs-service:${TAG}
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 80
          # @feature: agent; set env to configure java agent, If we use injector, we don't need to set env, only to configure java gent through annotation
          env:
            - name: SW_AGENT_NAME
              value: agent::songs
            - name: SW_AGENT_COLLECTOR_BACKEND_SERVICES
              value: ${BACKEND_SERVICE}:11800

---
apiVersion: v1
kind: Service
metadata:
  name: rcmd
spec:
  selector:
    app: recommendation
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: recommendation-deployment
  labels:
    app: recommendation
spec:
  replicas: 1
  selector:
    matchLabels:
      app: recommendation
  template:
    metadata:
      labels:
        app: recommendation
      annotations:
        sidecar.istio.io/inject: "${AGENTLESS}"
    spec:
      containers:
        - name: recommendation
          image: ${HUB}/recommendation-service:${TAG}
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 80
          env:
            - name: SW_AGENT_NAME
              value: agent::recommendation
            - name: SW_AGENT_COLLECTOR_BACKEND_SERVICES
              value: ${BACKEND_SERVICE}:11800

---
apiVersion: v1
kind: Service
metadata:
  name: app
spec:
  selector:
    app: app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-deployment
  labels:
    app: app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: app
  template:
    metadata:
      labels:
        app: app
      annotations:
        sidecar.istio.io/inject: "${AGENTLESS}"
    spec:
      containers:
        - name: app
          image: ${HUB}/app:${TAG}
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 80
          env:
            - name: SW_AGENT_NAME_SERVER
              value: agent::app
            - name: REACT_APP_SW_AGENT_NAME_UI
              value: agent::ui
            - name: SW_AGENT_COLLECTOR_BACKEND_SERVICES
              value: ${BACKEND_SERVICE}:11800

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loadgen-deployment
  labels:
    app: loadgen
spec:
  replicas: 1
  selector:
    matchLabels:
      app: loadgen
  template:
    metadata:
      labels:
        app: loadgen
      annotations:
        sidecar.istio.io/inject: "${AGENTLESS}"
    spec:
      containers:
        - name: app
          image: ${HUB}/load-gen:${TAG}
          imagePullPolicy: IfNotPresent
